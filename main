class No:
    def __init__(self, valor):
        self.valor = valor
        self.left = None
        self.right = None

class ArvoreBinaria:
    def __init__(self):
        self.root = None

    def inserir(self, valor):
        self.root = self._inserir_recursivamente(self.root, valor)

    def _inserir_recursivamente(self, node, valor):
        if node is None:
            return No(valor)
        if valor < node.valor:
            node.left = self._inserir_recursivamente(node.left, valor)
        elif valor > node.valor:
            node.right = self._inserir_recursivamente(node.right, valor)
        return node

    def altura(self):
        return self._altura_recursivamente(self.root)

    def _altura_recursivamente(self, node):
        if node is None:
            return 0
        left_height = self._altura_recursivamente(node.left)
        right_height = self._altura_recursivamente(node.right)
        return max(left_height, right_height) + 1

    def nos_internos(self):
        return self._nos_internos_recursivamente(self.root)

    def _nos_internos_recursivamente(self, node):
        if node is None:
            return 0
        if node.left or node.right:
            return 1 + self._nos_internos_recursivamente(node.left) + self._nos_internos_recursivamente(node.right)
        else:
            return 0

    def folhas(self):
        return self._folhas_recursivamente(self.root)

    def _folhas_recursivamente(self, node):
        if node is None:
            return 0
        if node.left is None and node.right is None:
            return 1
        else:
            return self._folhas_recursivamente(node.left) + self._folhas_recursivamente(node.right)

    def buscar(self, valor):
        return self._buscar_recursivamente(self.root, valor)

    def _buscar_recursivamente(self, node, valor):
        if node is None:
            return False
        if node.valor == valor:
            return True
        elif valor < node.valor:
            return self._buscar_recursivamente(node.left, valor)
        else:
            return self._buscar_recursivamente(node.right, valor)

arvore = ArvoreBinaria()

while True:
    try:
        valor = int(input("Insira um valor para a árvore (-1 para parar): "))
        if valor == -1:
            break
        arvore.inserir(valor)
    except ValueError:
        print("Por favor, insira um valor numérico válido.")

print("------\n MENU")
print("------")
print("")
select = int(input("Selecione o que deseja ver:\n 1- Altura\n 2- Nós internos\n 3- Folhas\n 4- Procurar valor na árvore\n"))
print("")

if select == 1:
    altura = arvore.altura() - 1  # Corrigido para não considerar a raiz como nível
    print(f'A árvore tem altura {altura}')

elif select == 2:
    nos_internos = arvore.nos_internos()
    print(f'A árvore tem {nos_internos} nós internos')

elif select == 3:
    folhas = arvore.folhas()
    print(f'A árvore tem {folhas} folhas')

elif select == 4:
    numero_busca = int(input("Procure por um número na árvore: "))

    if arvore.buscar(numero_busca):
        print(f"O número {numero_busca} está presente na árvore.")
    else:
        print(f"O número {numero_busca} não está presente na árvore.")
else:
    print("Seleção inválida")
